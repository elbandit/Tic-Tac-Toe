// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.5.0.0
//      Runtime Version:4.0.30319.225
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Wrox.BDD.Specs.UAT.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Game Play")]
    public partial class GamePlayFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GamePlay.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Game Play", "In order to play a game of tic-tac-toe\r\nAs a player\r\nI want to know the state of " +
                    "play", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Starting a game")]
        public virtual void StartingAGame()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Starting a game", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("that I have started a new game");
#line hidden
#line 8
    testRunner.Then("I should see the following displayed:", "=========================\r\nLets Play Tic-Tac-Toe!!!!\r\n=========================\r\n" +
                    "When prompted please input the\r\ncoordinates of your move in the\r\nformat row,col " +
                    "e.g. 0,1 for the\r\nfirst row and the second column\r\n\r\nX, make your move.\r\n\r\n", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Alternate Players")]
        public virtual void AlternatePlayers()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Alternate Players", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line 24
 testRunner.Given("that I have started a new game");
#line 25
 testRunner.And("I have read the introduction message");
#line 26
 testRunner.When("a player types in the coordinates \"2,2\"");
#line hidden
#line 27
    testRunner.Then("I should see the following displayed:", "   |   |   \r\n-----------\r\n   |   |   \r\n-----------\r\n   |   | X \r\n\r\nO, make your m" +
                    "ove.\r\n\r\n", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Displaying the game")]
        public virtual void DisplayingTheGame()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Displaying the game", ((string[])(null)));
#line 40
this.ScenarioSetup(scenarioInfo);
#line 41
 testRunner.Given("that I have started a new game");
#line 42
 testRunner.And("I have read the introduction message");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "player",
                        "row",
                        "column"});
            table1.AddRow(new string[] {
                        "X",
                        "1",
                        "1"});
            table1.AddRow(new string[] {
                        "O",
                        "0",
                        "1"});
#line 43
    testRunner.And("the following moves are played:", ((string)(null)), table1);
#line 47
 testRunner.When("a player types in the coordinates \"2,2\"");
#line hidden
#line 48
    testRunner.Then("I should see the following displayed:", "   | O |   \r\n-----------\r\n   | X |   \r\n-----------\r\n   |   | X \r\n\r\nO, make your m" +
                    "ove.\r\n\r\n", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
